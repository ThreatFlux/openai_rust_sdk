name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Validate and prepare release
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.check_release.outputs.exists == 'true' && steps.check_release.outputs.upload_url || steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          fetch-depth: 0
      
      - name: Determine version
        id: version
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
        run: |
          if [ "$EVENT_NAME" == "workflow_dispatch" ]; then
            VERSION="$INPUT_VERSION"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
      
      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi
      
      - name: Check CHANGELOG
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! grep -q "## \[$VERSION\]" CHANGELOG.md 2>/dev/null; then
            echo "Warning: Version $VERSION not found in CHANGELOG.md"
          fi
      
      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Extract release notes from CHANGELOG if available
          if [ -f CHANGELOG.md ]; then
            awk "/## \[$VERSION\]/,/## \[/" CHANGELOG.md | sed '1d;$d' > release_notes.md || echo "No specific release notes found" > release_notes.md
          else
            echo "Release $VERSION" > release_notes.md
          fi
          echo "Release notes generated"
      
      - name: Check if release exists
        id: check_release
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if gh release view "v$VERSION" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release v$VERSION already exists"
            # Get the upload URL from existing release
            UPLOAD_URL=$(gh api repos/${{ github.repository }}/releases/tags/v$VERSION --jq '.upload_url')
            echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release v$VERSION does not exist, will create it"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create GitHub Release
        id: create_release
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/create-release@0cb9c9b65d5d1901c1f53e5e66eaf4afd303e70e  # v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || contains(steps.version.outputs.version, '-') }}

  # Build release artifacts for multiple platforms
  build:
    name: Build Release Artifacts
    needs: prepare
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: openai-rust-sdk-linux-amd64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: openai-rust-sdk-linux-musl-amd64
            use_cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: openai-rust-sdk-linux-arm64
            use_cross: true
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: openai-rust-sdk-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: openai-rust-sdk-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: openai-rust-sdk-windows-amd64.exe
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b  # v1
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
      
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config
          # Cross handles all cross-compilation dependencies
      
      - name: Install cross-compilation tool
        if: matrix.use_cross
        run: cargo install cross
      
      - name: Update version in Cargo.toml (Unix)
        if: runner.os != 'Windows'
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' "s/^version = .*/version = \"$VERSION\"/" Cargo.toml
          else
            sed -i "s/^version = .*/version = \"$VERSION\"/" Cargo.toml
          fi
      
      - name: Update version in Cargo.toml (Windows)
        if: runner.os == 'Windows'
        run: |
          $version = "${{ needs.prepare.outputs.version }}"
          $content = Get-Content Cargo.toml -Raw
          $content = $content -replace '^version = .*', "version = `"$version`""
          Set-Content -Path Cargo.toml -Value $content -NoNewline
        shell: pwsh
      
      - name: Build release binary (Unix)
        if: runner.os != 'Windows'
        run: |
          if [ "${{ matrix.use_cross }}" == "true" ]; then
            cross build --release --target ${{ matrix.target }} --all-features
          else
            cargo build --release --target ${{ matrix.target }} --all-features
          fi
      
      - name: Build release binary (Windows)
        if: runner.os == 'Windows'
        run: cargo build --release --target ${{ matrix.target }} --all-features
      
      - name: Package binary (Unix)
        if: runner.os != 'Windows'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.artifact_name }}.tar.gz openai_rust_sdk
      
      - name: Package binary (Windows)
        if: runner.os == 'Windows'
        run: |
          cd target\${{ matrix.target }}\release
          7z a ..\..\..\${{ matrix.artifact_name }}.zip openai_rust_sdk.exe
      
      - name: Calculate checksums (Unix)
        if: runner.os != 'Windows'
        run: shasum -a 256 ${{ matrix.artifact_name }}.tar.gz > ${{ matrix.artifact_name }}.tar.gz.sha256
      
      - name: Calculate checksums (Windows)
        if: runner.os == 'Windows'
        run: certutil -hashfile ${{ matrix.artifact_name }}.zip SHA256 > ${{ matrix.artifact_name }}.zip.sha256
      
      - name: Upload release artifact (Unix)
        if: runner.os != 'Windows'
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5  # v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact_name }}.tar.gz
          asset_name: ${{ matrix.artifact_name }}.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload release artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5  # v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact_name }}.zip
          asset_name: ${{ matrix.artifact_name }}.zip
          asset_content_type: application/zip
      
      - name: Upload checksum (Unix)
        if: runner.os != 'Windows'
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5  # v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact_name }}.tar.gz.sha256
          asset_name: ${{ matrix.artifact_name }}.tar.gz.sha256
          asset_content_type: text/plain
      
      - name: Upload checksum (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5  # v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact_name }}.zip.sha256
          asset_name: ${{ matrix.artifact_name }}.zip.sha256
          asset_content_type: text/plain

  # Publish to crates.io
  publish-crate:
    name: Publish to crates.io
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b  # v1
        with:
          toolchain: stable
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config
      
      - name: Update version in Cargo.toml
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          sed -i "s/^version = .*/version = \"$VERSION\"/" Cargo.toml
      
      - name: Verify package
        run: |
          cargo package --all-features
          cargo package --list
      
      - name: Publish to crates.io
        run: cargo publish --all-features --token ${{ secrets.CRATES_IO_TOKEN }}
        continue-on-error: true  # Don't fail the whole release if crates.io publish fails

  # Build and push Docker images
  docker:
    name: Build and Push Docker Images
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392  # v3.6.0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3.11.1
      
      - name: Log in to Docker Hub
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1  # v3.5.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1  # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f  # v5.8.0
        with:
          images: |
            threatflux/openai-rust-sdk
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ needs.prepare.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.prepare.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.prepare.outputs.version }}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83  # v6.18.0
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.prepare.outputs.version }}
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Generate and upload signatures
  signatures:
    name: Generate Signatures
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      
      - name: Install cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159  # v3.9.2
      
      - name: Sign artifacts with cosign
        run: |
          echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
          # Sign each artifact (would need to download them first)
          # This is a placeholder for the actual signing process
          echo "Artifact signing would happen here"
          rm cosign.key
        continue-on-error: true

  # Update documentation
  docs:
    name: Update Documentation
    needs: [prepare, publish-crate]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          ref: main
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b  # v1
        with:
          toolchain: stable
      
      - name: Generate API documentation
        run: |
          cargo doc --all-features --no-deps
          echo "<meta http-equiv=refresh content=0;url=openai_rust_sdk/index.html>" > target/doc/index.html
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e  # v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          cname: openai-rust-sdk.threatflux.com
        continue-on-error: true