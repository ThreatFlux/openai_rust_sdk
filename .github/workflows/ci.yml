name: CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - '.dockerignore'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - '.dockerignore'
      - 'docs/**'
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday at midnight UTC

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings -C link-arg=-s
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Reduce debug info and optimize for smaller binaries
  CARGO_PROFILE_TEST_DEBUG: 1
  CARGO_PROFILE_DEV_DEBUG: 1

jobs:
  # Quick format and lint check
  quick-check:
    name: Quick Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b  # v1
        with:
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809  # v4.2.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Check formatting
        run: cargo fmt -- --check
      
      - name: Run clippy
        run: cargo clippy --all-features --all-targets -- -D warnings

  # Test matrix across different OS and Rust versions
  test:
    name: Test Suite
    needs: quick-check
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Reduce matrix for faster CI
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta
        include:
          - os: ubuntu-latest
            rust: stable
            coverage: true
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.rust == 'nightly' }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      
      # Free up disk space on GitHub runners
      - name: Free Disk Space (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be  # v1.3.1
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      
      - name: Free Disk Space (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          sudo rm -rf /Applications/Xcode_*.app
          sudo rm -rf ~/Library/Developer/CoreSimulator
          df -h
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b  # v1
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config
      
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
      
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install openssl
      
      - name: Cache cargo build
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809  # v4.2.4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-build-
      
      - name: Build
        run: cargo build --all-features --verbose
      
      - name: Run tests
        run: cargo test --all-features --verbose
        env:
          RUST_TEST_THREADS: 2
      
      - name: Run doc tests (split for disk space)
        run: |
          # Run doc tests in smaller batches to reduce disk usage
          cargo test --doc --all-features
      
      - name: Clean up test artifacts (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          rm -rf target/debug/deps/*.d
          rm -rf target/debug/deps/*.rmeta
          rm -rf target/debug/incremental
      
      - name: Clean up test artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if (Test-Path target/debug/deps/*.d) { Remove-Item target/debug/deps/*.d -Force }
          if (Test-Path target/debug/deps/*.rmeta) { Remove-Item target/debug/deps/*.rmeta -Force }
          if (Test-Path target/debug/incremental) { Remove-Item target/debug/incremental -Recurse -Force }
        shell: pwsh
      
      - name: Install cargo-llvm-cov (for coverage)
        if: matrix.coverage
        uses: taiki-e/install-action@5c27e59d8c472d2a91731d8b5d7fe040fad53387  # v2.58.18
      
      - name: Generate coverage
        if: matrix.coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      
      - name: Upload coverage to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@fdcc8476540edceab3de004e990f80d881c6cc00  # v5.5.0
        with:
          files: lcov.info
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  # Minimum supported Rust version check
  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      
      - name: Install MSRV toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b  # v1
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config
      
      - name: Check MSRV
        run: cargo check --all-features

  # Feature combination testing
  feature-checks:
    name: Feature Checks
    runs-on: ubuntu-latest
    needs: quick-check
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b  # v1
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config
      
      - name: Cache cargo build
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809  # v4.2.4
        with:
          path: target
          key: ${{ runner.os }}-feature-checks-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-feature-checks-
      
      - name: Check no default features
        run: cargo check --no-default-features
      
      - name: Check all features
        run: cargo check --all-features
      
      - name: Check each feature
        run: |
          cargo metadata --no-deps --format-version 1 | \
          jq -r '.packages[0].features | keys[]' | \
          while read feature; do
            echo "Checking feature: $feature"
            cargo check --no-default-features --features "$feature"
          done

  # Benchmarks
  bench:
    name: Benchmarks
    runs-on: ubuntu-latest
    needs: quick-check
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b  # v1
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config
      
      - name: Cache cargo build
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809  # v4.2.4
        with:
          path: target
          key: ${{ runner.os }}-bench-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-bench-
      
      - name: Run benchmarks
        run: cargo bench --no-run --all-features

  # Documentation build
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: quick-check
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b  # v1
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config
      
      - name: Build documentation
        run: cargo doc --all-features --no-deps
        env:
          RUSTDOCFLAGS: -D warnings
      
      - name: Check for broken links
        run: |
          cargo doc --all-features --no-deps
          ! grep -r "unresolved link" target/doc/*.html || exit 0

  # Integration tests (only on main branch or release PRs)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, feature-checks]
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'integration-test')
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b  # v1
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config
      
      - name: Run integration tests
        run: |
          cargo test --test '*' --all-features
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        continue-on-error: true  # Don't fail if API key is not set

  # Summary job for branch protection
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quick-check, test, msrv, feature-checks, bench, docs]
    if: always()
    steps:
      - name: Check if all jobs succeeded
        run: |
          if [[ "${{ needs.quick-check.result }}" != "success" || \
                "${{ needs.test.result }}" != "success" || \
                "${{ needs.msrv.result }}" != "success" || \
                "${{ needs.feature-checks.result }}" != "success" || \
                "${{ needs.bench.result }}" != "success" || \
                "${{ needs.docs.result }}" != "success" ]]; then
            echo "One or more required jobs failed"
            exit 1
          fi
          echo "All required jobs succeeded"