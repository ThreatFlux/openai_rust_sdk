name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '15 3 * * 1'  # Weekly on Monday at 3:15 AM UTC

env:
  CARGO_TERM_COLOR: always

jobs:
  # Security audit for dependencies
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run cargo audit
        run: cargo audit
      
      - name: Run cargo audit (json output)
        run: cargo audit --json > audit-report.json
        continue-on-error: true
      
      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: audit-report
          path: audit-report.json
          retention-days: 30

  # Dependency license check
  license-check:
    name: License Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-deny
        run: cargo install cargo-deny
      
      - name: Create deny.toml if not exists
        run: |
          if [ ! -f deny.toml ]; then
            cat > deny.toml << 'EOF'
          [licenses]
          confidence-threshold = 0.8
          allow = [
            "MIT",
            "Apache-2.0",
            "Apache-2.0 WITH LLVM-exception",
            "BSD-2-Clause",
            "BSD-3-Clause",
            "ISC",
            "Unicode-DFS-2016",
            "CC0-1.0",
          ]
          deny = [
            "GPL-2.0",
            "GPL-3.0",
            "AGPL-3.0",
            "LGPL-2.1",
            "LGPL-3.0",
          ]
          
          [sources]
          unknown-registry = "warn"
          unknown-git = "warn"
          
          [advisories]
          db-path = "~/.cargo/advisory-db"
          db-urls = ["https://github.com/rustsec/advisory-db"]
          yanked = "warn"
          EOF
          fi
      
      - name: Check licenses
        run: cargo deny check licenses
      
      - name: Check advisories
        run: cargo deny check advisories
      
      - name: Check bans
        run: cargo deny check bans

  # SARIF/CodeQL scanning
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3.27.9
        with:
          languages: 'rust'
          queries: security-and-quality
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config
      
      - name: Build for CodeQL
        run: cargo build --all-features
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3.27.9

  # Semgrep scanning
  semgrep:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/rust
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      
      # Semgrep automatically uploads results when publishToken is set
      # No manual SARIF upload needed

  # Supply chain security
  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-supply-chain
        run: |
          cargo install cargo-supply-chain || true
      
      - name: Check supply chain
        run: |
          cargo supply-chain update
          cargo supply-chain publishers
        continue-on-error: true
      
      - name: Generate SBOM with cargo-cyclonedx
        run: |
          cargo install cargo-cyclonedx
          cargo cyclonedx --format json --output-file sbom.json
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json
          retention-days: 30

  # Secret scanning
  secrets:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for secret scanning
      
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --format=sarif --output=trufflehog.sarif
      
      - name: Upload TruffleHog results
        uses: github/codeql-action/upload-sarif@v3.27.9
        with:
          sarif_file: trufflehog.sarif
        if: always()
      
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # OWASP dependency check
  owasp:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'openai-rust-sdk'
          path: '.'
          format: 'HTML,SARIF'
          args: >
            --enableRetired
            --enableExperimental
      
      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        with:
          name: owasp-report
          path: reports/
          retention-days: 30
      
      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3.27.9
        with:
          sarif_file: reports/dependency-check-report.sarif
        if: always()

  # Container scanning (if Docker image exists)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          docker build -t openai-rust-sdk:scan \
            --build-arg VERSION=${{ github.sha }} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${{ github.sha }} \
            .
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'openai-rust-sdk:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3.27.9
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Grype scanner
        uses: anchore/scan-action@v4
        with:
          image: 'openai-rust-sdk:scan'
          fail-build: false
          severity-cutoff: high
      
      - name: Upload Grype results
        uses: github/codeql-action/upload-sarif@v3.27.9
        with:
          sarif_file: results.sarif
        if: always()

  # Security scorecard
  scorecard:
    name: Security Scorecard
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      
      - name: Run analysis
        uses: ossf/scorecard-action@v2.4.0
        with:
          results_file: scorecard.sarif
          results_format: sarif
          publish_results: true
      
      - name: Upload results to code scanning
        uses: github/codeql-action/upload-sarif@v3.27.9
        with:
          sarif_file: scorecard.sarif